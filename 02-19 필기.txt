■ 데이터 분석 시각화 가격

	테블로 분석 시각화 툴 -> 한사람당 300만원(슈퍼유저),
				일반유저 120만원

				1년, 2년 라이센스







■ 원형 그래프를 샤이니로 시각화

문제 124. 사원 테이블의 월급을 원형 그래프로 그리시오 !

	pie(emp$sal)





문제 125. 위의 그래프를 다시 출력하는데 누구의 월급인지 명시되게 하시오 !

	pie( emp$sal, main = "Salary Pie Chart",
	     labels= emp$ename, col = rainbow(15))






문제 126. 위의 그래프에 월급에 비율을 붙여서 출력하시오 !

	sal_labels <- round(emp$sal/sum(emp$sal) * 100, 1)
	sal_labels
	
	[1]  2.5  5.0  3.9  9.2  3.9  8.8  7.6  9.3 15.5  4.7  3.4  2.9  9.3  4.0  9.9
	
	sal_labels2 <- paste(emp$ename, sal_labels, "%")
	sal_labels2
	
	[1] "SMITH 2.5 %"  "ALLEN 5 %"    "WARD 3.9 %"   "JONES 9.2 %"  "MARTIN 3.9 %" "BLAKE 8.8 %"  
	    "CLARK 7.6 %"  "SCOTT 9.3 %"  "KING 15.5 %" 
	[10] "TURNER 4.7 %" "ADAMS 3.4 %"  "JAMES 2.9 %"  "FORD 9.3 %"   "MILLER 4 %"   "JACK 9.9 %"


	pie(emp$sal, main = "Salary Pie Chart",
	    labels=sal_labels2, col=rainbow(15))







문제 127. 2014년도 업종별 창업 비율을 아래와 같이 원형 그래프로 그리시오 !

	create_cnt <- read.csv("창업건수.csv", header=T)
	head(create_cnt)
	
	x <- create_cnt[create_cnt$X == 2014, (2:8)] 또는
	x <- create_cnt[create_cnt$X == 2014, -1]
	
	cnt_labels <- round(x/sum(x) * 100, 1)
	cnt_labels
	t(cnt_labels)
	
	cnt_labels2 <- paste(colnames(cnt_labels), t(cnt_labels), '%')
	pie(t(cnt_labels), col=rainbow(7), labels=cnt_labels2)






문제 128. 2013년도 업종별 창업 비율을 아래와 같이 원형 그래프로 그리시오 !

	x <- create_cnt[create_cnt$X == 2013, (2:8)] 또는
	x <- create_cnt[create_cnt$X == 2013, -1]
	
	cnt_labels <- round(x/sum(x) * 100, 1)
	cnt_labels
	t(cnt_labels)
	
	cnt_labels2 <- paste(colnames(cnt_labels), t(cnt_labels), '%')
	pie(t(cnt_labels), col=rainbow(7), labels=cnt_labels2)






문제 129. 위의 스크립트를 편하게 사용할 수 있도록 샤이니로 구현하시오 !

	library(shiny)
        library(datasets)
        
        setwd("d:\\R_data")
        create_cnt <- read.csv("창업건수.csv", header=T)
        
        # 합친 상태로 함수에 넣을 수 없다.
        
        # Define UI ----
        ui <- fluidPage(    
            
            # Give the page a title
            titlePanel("년도별 업종별 창업 현황"),
            
            # Generate a row with a sidebar
            sidebarLayout(      
                
                # Define the sidebar with one input
                sidebarPanel(
                    selectInput("region", "업종:", 
                                choices=create_cnt$X),
                    hr(),
                    helpText("Data from AT&T (1961) The World's Telephones.")
                ),
                
                # Create a spot for the barplot
                mainPanel(
                    plotOutput("phonePlot")  
                )
                
            )
        )
        
        # Define server logic ----
        server <-function(input, output) {
            
            # Fill in the spot we created for a plot
            output$phonePlot <- renderPlot({
                
                # Render a barplot
                x <- create_cnt[create_cnt$X == input$region, -1]
                
                cnt_labels <- round(x/sum(x) * 100, 1)
                cnt_labels2 <- paste(colnames(cnt_labels), t(cnt_labels), '%')
                pie(t(cnt_labels), col=rainbow(7), labels=cnt_labels2)
            })
        }
        
        # Run the app ----
        shinyApp(ui = ui, server = server)










■ 라인(plot) 그래프



문제 130. 아래의 점(plot) 그래프를 그리시오 !

	graphics.off()
	
	cars <- c(1,3,6,4,9)
	cars
	
	plot(cars)






문제 131. 위의 그래프에 파란색 선을 그리시오 !

	graphics.off()
	
	cars <- c(1,3,6,4,9)
	cars
	
	plot(cars, type="o", col="blue")






문제 132. 차와 트럭의 판매된 대수를 라인 그래프로 시각화 하시오 !

	graphics.off()
	
	cars <- c(1,3,6,4,9)
	trucks <- c(2,5,4,5,12)
	
	plot(cars, type="o", col="blue", ylim =c(0,12))
	
	# 그래프 창을 닫지 말고 바로 이어서
	
	lines(trucks, type="o", pch = 22, lty = 2, col = "red")
	
		※ 설명 : pch = 21 : 동그라미,  lty=1 : 직선
			  pch = 22 : 네모	lty=2 : 점선







문제 133. 다시 위의 2개의 그래프를 아래의 순서대로 시각화 하시오 !

	graphics.off()
	
	cars <- c(1,3,6,4,9)
	trucks <- c(2,5,4,5,12)
	
	g_range <- range(0, cars, trucks)
	g_range
	
	[1] 0 12
	
	plot( cars, type="o", col="blue", ylim = g_range,
	      axes=FALSE, ann=FALSE)
	axis(1, at=1:5, lab=c("mon","tue","wed","thu","fri"))
	
	axis(2)
	box()
	
	lines(trucks, type="o", pch = 22, lty = 2, col = "red" )
	
	legend(1,12, c("cars","trucks"), col = c("blue","red"),
	       cex=0.8, pch = 21:22, lty= 1:2)
	
		※ 설명 : cex = 0.8 : 글씨 크기








문제134. 위의 코드를 활용해서 치킨집의 창업/폐업 현황을 라인 그래프로 시각화 하시오 !

	g <- create_cnt$치킨집
	m <- drop_cnt$치킨집
	g_range <- range(0, g, m)
	plot(g, type="o", col="blue", ylim=g_range, 
	     axes=FALSE, ann=FALSE)
	axis(1, at=1:10, lab=create_cnt$X)
	axis(2)
	box()
	lines(m, type="o", pch=22, lty=2, col="red")
	title(main="치킨집 창업/폐업현황", col.main="red", font.main=4)
	title(xlab="Days", col.lab=rgb(0,0.5,0))
	title(ylab="Total", col.lab=rgb(0,0.5,0))
	legend(5, g_range[2], c("창업","폐업"), cex=0.8, 
	       col=c("blue","red"), pch=21:22, lty=1:2);







문제 135. 위의 업종별 창업/폐업 현황을 샤이니로 자동화 하시오 !


	library(shiny)
        library(datasets)
        
        setwd("d:\\data")
        create_cnt <- read.csv("창업건수.csv", header=T)
        drop_cnt <- read.csv("폐업건수.csv", header=T)
        
        # Define UI ----
        ui <- fluidPage(    
            
            # Give the page a title
            titlePanel("업종별 창업/폐업 현황"),
            
            # Generate a row with a sidebar
            sidebarLayout(      
                
                # Define the sidebar with one input
                sidebarPanel(
                    selectInput("region", "업종:", 
                                choices=colnames(create_cnt)[-1]),
                    hr(),
                    helpText("Data from AT&T (1961) The World's Telephones.")
                ),
                
                # Create a spot for the barplot
                mainPanel(
                    plotOutput("phonePlot")  
                )
                
            )
        )
        
        # Define server logic ----
        server <-function(input, output) {
            
            # Fill in the spot we created for a plot
            output$phonePlot <- renderPlot({
                
                # Render a line graph 
                
                
                g <- create_cnt[,input$region]
                m <- drop_cnt[,input$region]
                g_range <- range(0, g, m)
                plot(g, type="o", col="blue", ylim=g_range, 
                     axes=FALSE, ann=FALSE)
                axis(1, at=1:10, lab=create_cnt$X)
                axis(2)
                box()
                lines(m, type="o", pch=22, lty=2, col="red")
                title(main= input$region, col.main="red", font.main=4)
                title(xlab="Days", col.lab=rgb(0,0.5,0))
                title(ylab="Total", col.lab=rgb(0,0.5,0))
                legend(5, g_range[2], c("창업","폐업"), cex=0.8, 
                       col=c("blue","red"), pch=21:22, lty=1:2);
                
                
            })
        }
        
        # Run the app ----
        shinyApp(ui = ui, server = server)








■ 그래프

	1. 기본 막대 그래프
	2. 기본 원형 그래프
	3. 기본 라인 그래프
	4. ggplot2 막대 그래프
	5. plotly 원형 그래프
	6. plotly 라인 그래프






■ ggplot2 막대 그래프 그리기

install.packages("ggplot2")

xdata <- as.factor(create_cnt[,"X"])
ydata <- as.factor(create_cnt[,"치킨집"])

xdata
ydata


fdata = data.frame(x=xdata, y=ydata)
fdata

library(ggplot2)

ggplot(fdata) + geom_bar(aes_string(x='x', y='y', fill='x'), stat="identity", show.legend=F)
						   ↓				↓
						legend 설정			legend 안보이게







문제 136. csv 파일을 불러와서 x 축과 y 축을 정해서 위의 ggplot 막대 그래프를 그리는 샤이니 
	  코드를 작성하시오 !

#lesson_17 참고
############## set this file location to working directory ##########################
packages <- 'rstudioapi'
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
  install.packages(setdiff(packages, rownames(installed.packages())))
}
library('rstudioapi')
current_dir<-dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)

package_in<-function(p_name,option=1){
  packages <- p_name
  if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
    install.packages(setdiff(packages, rownames(installed.packages())))
  }
  if (option==1){
    library(p_name,character.only = TRUE)
  }
}

###########################1. 패키지 설치##########################################

package_in('shinydashboard')
package_in('shiny')
package_in('ggplot2')


######################### 2. 화면 개발 ###########################################

sidebar <- dashboardSidebar(
  sidebarMenu(
    fileInput("file1", "Choose CSV File",
              multiple = FALSE,
              accept = c("text/csv",".xlsx",".txt",
                         "text/comma-separated-values,text/plain",
                         ".csv")),
    
    menuItem("Barplot",
             menuSubItem('normal',tabName='barplot')
    )
    
    
  )
)


body <- dashboardBody(
  
  tabItems(
    
    ##### bar plot
    tabItem(tabName = "barplot",
            sidebarPanel(
              selectInput("in_sel_bar_xVar","x Variable:", choices = NULL),
              selectInput("in_sel_bar_yVar","y Variable:", choices = NULL)
            ),
            mainPanel(
              plotOutput('plot_bar')
            )
    )
  )
)



ui<-dashboardPage(
  dashboardHeader(title='my graph'),
  sidebar,
  body
  
)




######################3. 서버단 개발 ########################################


server <- function(input, output,session) {
  options(warn = -1)
  options(shiny.maxRequestSize = 30*1024^2)
  
  
  
  
  dataload<-reactive({
    
    req(input$file1)
    
    file1 = input$file1
    data1 = read.csv(file1$datapath)
    
    updateSelectInput(session, "in_sel_bar_xVar", choices = colnames(data1))
    updateSelectInput(session, "in_sel_bar_yVar", choices = colnames(data1))
    
    return(data1)
  })
  
  ####nomal_bar
  output$plot_bar <- renderPlot({
    table_in<-dataload()
    
    xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
    ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
    fdata=data.frame(x=xdata,y=ydata)
    
    
    ggplot(fdata) + 
      geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
    
  })
}

######################### 4. 샤이니 실행 ###############################

shinyApp(ui = ui, server = server)









■ plotly 원형 그래프

install.packages("plotly")

library(plotly)

plot_ly(create_cnt, labels = ~colnames(create_cnt)[-1], values= ~as.factor(create_cnt[create_cnt$X=="2013",-1]), type="pie")








문제 137. (점심시간 문제) 문제 136 번은 ggplot 으로 막대 그래프를 그리는 코드였는데 이번에는 plotly 로 
	  원형 그래프가 출력되는 샤이니 코드를 작성하시오 !

	  년도 선택하는 select input box 하나만 나오게

	library(shiny)
        library(datasets)
        
        opn <- read.csv('창업건수.csv',header=T)
        cls <- read.csv('폐업건수.csv',header=T)
        
        # Define UI ----
        ui <- fluidPage(    
            
            # Give the page a title
            titlePanel("Opened Store By Year"),
            
            # Generate a row with a sidebar
            sidebarLayout(      
                
                # Define the sidebar with one input
                sidebarPanel(
                    selectInput("year", "Year:", 
                                choices=opn$X),
                    hr(),
                    helpText("Data from Oracle Yu.")
                ),
                
                # Create a spot for the barplot
                mainPanel(
                    plotlyOutput("storePlot")  
                )
                
            )
        )
        
        # Define server logic ----
        server <-function(input, output) {
            
            # Fill in the spot we created for a plot
            output$storePlot <- renderPlotly({
                
                plot_ly(opn, labels=~colnames(opn)[-1],
                        values=~as.factor(opn[opn$X == input$year,-1]),type='pie')
                
            })
        }
        
        # Run the app ----
        shinyApp(ui = ui, server = server)









■ 소리를 그래프로 시각화 하는 방법

	* 소리를 시각화 하기 위한 R 코드

		install.packages("tuneR")
		
		library(tuneR)
		
		audio <- readWave("output.wav")
		
		play(audio)
		
		head(audio@left, 1000)
		
		plot(head(audio@left,1000))





문제 138. 원더걸스의 so hot 을 시각화 하시오 !

	audio1 <- readWave("sohot.wav")
	
	play(audio1)
	
	head(audio1@left, 1000)
	
	plot(head(audio1@left, 1000))






문제 139. 정상적인 심장박동 소리를 포함해서 비정상적인 심장 박동 소리를 각각 시각화 하시오 !

	normal.wav <- 정상 심장 박동 소리
	
	문제가 있는 심장박동 소리들
	
	ar.wav
	mr.wav
	ps.wav


graphics.off()
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))

audio1 <- readWave("normal.wav")
audio2 <- readWave("ps.wav")
audio3 <- readWave("mr.wav")
audio4 <- readWave("ar.wav")

plot(audio1)
plot(audio2)
plot(audio3)
plot(audio4)






문제 140. 치킨집의 년도별 창업 현황을 plotly의 라인그래프로 그리시오 !

	library(plotly)
	plot_ly(data = create_cnt, x = ~create_cnt[ ,"X"], y = ~create_cnt[ , "치킨집"], 
	        type = "scatter", mode = "dot")







문제 141. 샤이니의 사이드 메뉴에 linechart를 추가하고 linechart를 클릭하면 업종을 물어보게 해서 해당 
	  업종의 년도별 창업 현황이 출력되게 하시오 !

	############## set this file location to working directory ##########################
        packages <- 'rstudioapi'
        if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
            install.packages(setdiff(packages, rownames(installed.packages())))
        }
        library('rstudioapi')
        current_dir<-dirname(rstudioapi::getSourceEditorContext()$path)
        setwd(current_dir)
        
        package_in<-function(p_name,option=1){
            packages <- p_name
            if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
                install.packages(setdiff(packages, rownames(installed.packages())))
            }
            if (option==1){
                library(p_name,character.only = TRUE)
            }
        }
        
        ###########################1. 패키지 설치##########################################
        
        package_in('shinydashboard')
        package_in('shiny')
        package_in('ggplot2')
        package_in('plotly')
        
        ######################### 2. 화면 개발 ###########################################
        
        sidebar <- dashboardSidebar(
            sidebarMenu(
                fileInput("file1", "Choose CSV File",
                          multiple = FALSE,
                          accept = c("text/csv",".xlsx",".txt",
                                     "text/comma-separated-values,text/plain",
                                     ".csv")),
                
                menuItem("Plot",
                         menuSubItem('Barplot',tabName='barplot'),
                         menuSubItem('Piechart',tabName='piechart'),
                         menuSubItem('linechart',tabName='linechart')
                )
                
                
            )
        )
        
        
        body <- dashboardBody(
            
            tabItems(
                
                ##### bar plot
                tabItem(tabName = "barplot",
                        sidebarPanel(
                            selectInput("in_sel_bar_xVar","x Variable:", choices = NULL),
                            selectInput("in_sel_bar_yVar","y Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotOutput('plot_bar')
                        )
                ),
                ##### piechart
                tabItem(tabName = "piechart",
                        sidebarPanel(
                            selectInput("in_sel_pie_xVar","x Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotlyOutput('plot_pie')
                        )
                ),
                ##### linechart
                tabItem(tabName = "linechart",
                        sidebarPanel(
                            selectInput("in_sel_line_xVar","x Variable:", choices = NULL),
                            selectInput("in_sel_line_yVar","y Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotlyOutput('plot_line')
                        )
                )
            )
        )
        
        
        
        ui<-dashboardPage(
            dashboardHeader(title='my graph'),
            sidebar,
            body
            
        )
        
        
        
        
        ######################3. 서버단 개발 ########################################
        
        
        server <- function(input, output,session) {
            options(warn = -1)
            options(shiny.maxRequestSize = 30*1024^2)
            
            
            
            
            dataload<-reactive({
                req(input$file1)
                
                file1 = input$file1
                data1 = read.csv(file1$datapath)
                
                
                updateSelectInput(session, "in_sel_bar_xVar", choices = colnames(data1))
                updateSelectInput(session, "in_sel_bar_yVar", choices = colnames(data1))
                
                updateSelectInput(session, "in_sel_pie_xVar", choices = data1[,1])
                
                updateSelectInput(session, "in_sel_line_xVar", choices = colnames(data1))
                updateSelectInput(session, "in_sel_line_yVar", choices = colnames(data1))
                return(data1)
                
            })
            
            ####nomal_bar
            output$plot_bar <- renderPlot({
                table_in<-dataload()
                
                xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
                ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
                fdata=data.frame(x=xdata,y=ydata)
                
                
                ggplot(fdata) + 
                    geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
                
                
            })
            ####nomal_pie
            output$plot_pie <- renderPlotly({
                table_in<-dataload()
                
                plot_ly(table_in, labels = ~colnames(table_in)[-1], 
			values=~as.factor( table_in[table_in[,1] == input$in_sel_pie_xVar,-1] ),
			type='pie')
                
                
            })
            ####nomal_line
            output$plot_line <- renderPlotly({
                table_in<-dataload()
                
                x <- list(title = input$in_sel_line_xVar)
                y <- list(title = input$in_sel_line_yVar)
        
                plot_ly(data = table_in,
                        x = ~table_in[,input$in_sel_line_xVar],  
		        y = ~table_in[, input$in_sel_line_yVar],type='scatter',mode='dot')%>%
                    layout(xaxis = x, yaxis = y)
            })
        }
        
        ######################### 4. 샤이니 실행 ###############################
        
        shinyApp(ui = ui, server = server)












■ 산포도와 상관관계

	" 산포도 그래프를 데이터간의 상관관계를 나타낼때 유용하다 "

	예제 : 나이와 소득관의 상관관계가 있는지 데이터를 시각화 하시오

		age_income <- read.csv("age_income.csv" , header=T)
		age_income

		plot(age_income$age,age_income$month_income, xlab="나이", ylab="소득", col="red", pch=16)

		그림 2





문제 142. plotly 패키지를 이용해서 나이와 소득의 산포도 그래프를 그리시오 !

	plotly(age_income)
	plot_ly(data = age_income, x = ~age_income[ ,"age"], y = ~age_income[ , "month_income"], 
	       	type = "scatter", mode = "markers", color = I("#FA58AC"))






문제 143. 샤이니의 사이드 메뉴 아래쪽에 Plotchart를 추가해서 X축과 y 축을 입력받아 산포도 그래프가 
	  출력되게 하시오 !
          (그래프 아래쪽에 상관계수도 같이 출력되게 하시오 !)
        
        ############## set this file location to working directory ##########################
        packages <- 'rstudioapi'
        if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
            install.packages(setdiff(packages, rownames(installed.packages())))
        }
        library('rstudioapi')
        current_dir<-dirname(rstudioapi::getSourceEditorContext()$path)
        setwd(current_dir)
        
        package_in<-function(p_name,option=1){
            packages <- p_name
            if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
                install.packages(setdiff(packages, rownames(installed.packages())))
            }
            if (option==1){
                library(p_name,character.only = TRUE)
            }
        }
        
        ###########################1. 패키지 설치##########################################
        
        package_in('shinydashboard')
        package_in('shiny')
        package_in('ggplot2')
        package_in('plotly')
        package_in('lattice')
        
        ######################### 2. 화면 개발 ###########################################
        
        sidebar <- dashboardSidebar(
            sidebarMenu(
                fileInput("file1", "Choose CSV File",
                          multiple = FALSE,
                          accept = c("text/csv",".xlsx",".txt",
                                     "text/comma-separated-values,text/plain",
                                     ".csv")),
                
                menuItem("Plot",
                         menuSubItem('Barplot',tabName='barplot'),
                         menuSubItem('Piechart',tabName='piechart'),
                         menuSubItem('linechart',tabName='linechart'),
                         menuSubItem('markerchart',tabName='markerchart')
                )
                
                
            )
        )
        
        
        body <- dashboardBody(
            
            tabItems(
                
                ##### bar plot
                tabItem(tabName = "barplot",
                        sidebarPanel(
                            selectInput("in_sel_bar_xVar","x Variable:", choices = NULL),
                            selectInput("in_sel_bar_yVar","y Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotOutput('plot_bar')
                        )
                ),
                ##### piechart
                tabItem(tabName = "piechart",
                        sidebarPanel(
                            selectInput("in_sel_pie_xVar","x Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotlyOutput('plot_pie')
                        )
                ),
                ##### linechart
                tabItem(tabName = "linechart",
                        sidebarPanel(
                            selectInput("in_sel_line_xVar","x Variable:", choices = NULL),
                            selectInput("in_sel_line_yVar","y Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotlyOutput('plot_line')
                        )
                ),
                ##### markerchart
                tabItem(tabName = "markerchart",
                        sidebarPanel(
                            selectInput("in_sel_marker_xVar","x Variable:", choices = NULL),
                            selectInput("in_sel_marker_yVar","y Variable:", choices = NULL)
                        ),
                        mainPanel(
                            plotOutput('plot_marker'),
                            textOutput('text_scatter')
                        )
                )
            )
        )
        
        
        
        ui<-dashboardPage(
            dashboardHeader(title='my graph'),
            sidebar,
            body
            
        )
        
        
        
        
        ######################3. 서버단 개발 ########################################
        
        
        server <- function(input, output,session) {
            options(warn = -1)
            options(shiny.maxRequestSize = 30*1024^2)
            
            
            
            
            dataload<-reactive({
                req(input$file1)
                
                file1 = input$file1
                data1 = read.csv(file1$datapath)
                
                
                updateSelectInput(session, "in_sel_bar_xVar", choices = colnames(data1))
                updateSelectInput(session, "in_sel_bar_yVar", choices = colnames(data1))
                
                updateSelectInput(session, "in_sel_pie_xVar", choices = data1[,1])
                
                updateSelectInput(session, "in_sel_line_xVar", choices = colnames(data1))
                updateSelectInput(session, "in_sel_line_yVar", choices = colnames(data1))
                
                updateSelectInput(session, "in_sel_marker_xVar", choices = colnames(data1))
                updateSelectInput(session, "in_sel_marker_yVar", choices = colnames(data1))
                return(data1)
                
            })
            
            ####nomal_bar
            output$plot_bar <- renderPlot({
                table_in<-dataload()
                
                xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
                ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
                fdata=data.frame(x=xdata,y=ydata)
                
                
                ggplot(fdata) + 
                    geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
                
                
            })
            ####nomal_pie
            output$plot_pie <- renderPlotly({
                table_in<-dataload()
                
                plot_ly(table_in, labels = ~colnames(table_in)[-1], 
		        values=~as.factor( table_in[table_in[,1] == input$in_sel_pie_xVar,-1] ),
			type='pie')
                
                
            })
            
            ####nomal_line
            output$plot_line <- renderPlotly({
                table_in<-dataload()
                
                x <- list(title = input$in_sel_line_xVar)
                y <- list(title = input$in_sel_line_yVar)
                
                plot_ly(data = table_in,
                        x = ~table_in[,input$in_sel_line_xVar],  
			y = ~table_in[, input$in_sel_line_yVar],type='scatter',mode='dot')%>%
                    layout(xaxis = x, yaxis = y)
            })
            
            ####nomal_marker
            output$plot_marker <- renderPlot({
                table_in<-dataload()
        
                xyplot(table_in[,input$in_sel_marker_yVar]~table_in[,input$in_sel_marker_xVar], 
                       grid=T,type=c('p','smooth'),col.line='darkorange',lwd=2, 
                       xlab=input$in_sel_marker_xVar,ylab=input$in_sel_marker_yVar)
            })
            output$text_scatter <- renderText({
                table_in<-dataload()
                paste("The correlation between the two is: ", cor(table_in[,input$in_sel_marker_yVar],
                                                                  table_in[,input$in_sel_marker_xVar]))
            })
            
        }
        
        ######################### 4. 샤이니 실행 ###############################
        
        shinyApp(ui = ui, server = server)











■ 사분위수 그래프

	* 사분위수 그래프로 분석해야하는 데이터

	1. 데이터의 퍼짐정도가 매우 큰 경우
	2. 이상치 있는 경우
	3. 평균 하나로는 통계를 대표할 수 없다.
		중앙값, 최빈값, 최대값, 최소값, 평균값

	4. 사분위수 그래프를 가로로 눕혀놓고 보면 정규분포 모양을 확인할 수 있다.


	예제 :
		library(lattice)
		bwplot(emp$sal)
		summary(emp$sal)

		   Min. 	1st Qu.  	Median    	Mean 		3rd Qu.    	Max. 
		    800    	1250    	1600    	2148    	2988    	5000 
		    ↑		 ↑		 ↑		 ↑		 ↑		 ↑
		  최소값   1번째 사분위수       중앙값         평균값 	    3번째 사분위수     최대값
				(Q1)		 (Q2)				(Q3)




문제 144. 우리반 나이 데이터를 가지고 사분위수 그래프를 그리시오 !

	emp8 <- read.csv("emp8.csv", header = T)
	bwplot(emp8$age)


